<?php

/**
 * ---------------------------------------------------------------------------------------------------------------------
 * Integrated by BKLV-Robo [RBOX-3]
 * Version: 3.0.2
 * Sysmtem URL: http://bklv.ru/robo/
 * User: webmaster.rentabox@bklv.ru
 * Date: 23.05.2017
 * Time: 13:02
 * Tech support:
 *  - url: http://bklv.ru/tech_support/
 *  - email: rbox.support.tech@bklv.ru
 *  - phone: +7(495)220-17-27
 * ---------------------------------------------------------------------------------------------------------------------
 */

#=======================================================================================================================
$path = $_SERVER['DOCUMENT_ROOT'] . '/.bklv';
/** @noinspection PhpIncludeInspection */
include($path);
#=======================================================================================================================

/** Class DB */
class DB
{

    #===================================================================================================================
    # ГРУППЫ ТАБЛИЦ
    #===================================================================================================================
    const INDEX_TABLE_MULTI = 'tables_multi';
    const INDEX_TABLE_SINGLE = 'tables_single';
    #===================================================================================================================

    #===================================================================================================================
    # СТАНДАРТНЫЕ ФАЙЛЫ ДЛЯ МИГРАЦИИ
    #===================================================================================================================
    /** @var string "FILE - STRUCTURE CONFIG" */
    const FILE_STRC = 'strc.yml';
    #-------------------------------------------------------------------------------------------------------------------
    /** @var string "FILE - STRUCTURE ATTRIBUTES" */
    const FILE_ATTR = 'attr.yml';
    #-------------------------------------------------------------------------------------------------------------------
    /** @var string "FILE - STRUCTURE DATA" */
    const FILE_DATA = 'data.yml';
    #===================================================================================================================

    #===================================================================================================================
    # ПОДКЛЮЧЕНИЕ ЧЕРЕЗ PDO
    #===================================================================================================================
    /** @var $PDO array DB Connection isntances */
    static $PDO = array();
    #===================================================================================================================

    #===================================================================================================================
    # ВЫДАЧА РЕЗУЛЬТАТОВ
    #===================================================================================================================
    /** @var array - BAD SQL CONNECTION */
    const ERR = array('lid' => NULL, 'res' => array(), 'err' => array(1, 1, 1), 'q' => NULL, 'count' => 0);
    #===================================================================================================================

    #===================================================================================================================
    # СЧЕТЧИКИ
    #===================================================================================================================
    /** @var string Счетчик записей лога в MySQL */
    const COUNTER_LOG_INDEX_COLUMN_NAME = '_log_counter_';
    #===================================================================================================================
..................
    #===================================================================================================================
    /**
     * Select Data from MySQL Table: ONLY_ONE_ROW + ONLY_ONE_ROW_FIELD | ALL_FIELDS
     * @var $app App
     * @var $tbl_name string Table name
     * @var $fld string USED FIELD
     * @var $val mixed VALUE to check
     * @var $note string
     * @return string
     */
    public static function checkValue(App &$app, $tbl_name = NULL, $fld = NULL, $val = NULL, $note = NULL)
    {
        #---------------------------------------------------------------------------------------------------------------
        if (!$fld) {
            Logger::FixFE($app, __METHOD__, '{{ma_checker}}', '{{ma_checker_db}}',
                '{{errDBcheckerFieldNotSpecified}}');
        }
        #---------------------------------------------------------------------------------------------------------------
        if (!$val) {
            Logger::Fix($app, __METHOD__, '{{ma_checker}}', '{{ma_checker_db}}', '{{fixDBcheckerValueIsEmpty}}');
        }
        #---------------------------------------------------------------------------------------------------------------
        $data = DB::sqlSelectOne($app, $tbl_name, array(array($fld => $val)));
        #---------------------------------------------------------------------------------------------------------------
        if (is_array($data) && $data) {
            return $data[$fld];
        } else {
            Logger::Fix($app, __METHOD__, '{{ma_checker}}', '{{ma_checker_db}}', '{{fixEmptyValue}}', $note);
        }
        return NULL;
    }
    #===================================================================================================================

    #===================================================================================================================
    /**
     * make DB Connection if possible
     * @var $app App
     * @var $tbl_name string Table name
     * @var $gr array Group field name
     * @var $f_k array Filter key
     * @var $f_v array Filter val
     * @return array
     */
    static function sqlSelAllGrU2(App &$app, $tbl_name, $gr, $f_k, $f_v)
    {
        /** @var $pdo PDO */
        DB::chDB($app);
        $sqlR = array();
        #---------------------------------------------------------------------------------------------------------------
        if (!$tbl_name || !isset($app->t[$tbl_name])) {
            Logger::FixFE($app, __METHOD__, '{{ma_checker}}',
                '{{ma_checker_db}}', '{{errDBTableNameUnknown}}', '<u>{{dbTableName}}</u>: ' . $tbl_name);
        }
        #---------------------------------------------------------------------------------------------------------------
        $p = $app->dbProfileName;
        if (isset(DB::$PDO[$p]) && DB::$PDO[$p] instanceof PDO) {
            #-----------------------------------------------------------------------------------------------------------
            $sqlT = $app->t[$tbl_name];
            $q = 'SELECT * FROM ' . $sqlT . ' WHERE `' . $f_k . '` = ' . "'" . $f_v . "'";
            $pdo = DB::$PDO[$p];
            $exe = $pdo->prepare($q);
            $exe->execute();
            $sqlC = $exe->rowCount();
            if ($exe && $sqlC > 0) {
                $r = $exe->fetchAll(PDO::FETCH_ASSOC);
                foreach ($r as $k => $v) {
                    $sqlR[$v[$gr[0]]][$v[$gr[1]]] = $v;
                }
            }
            $i = array_merge(DB::ERR, array('err' => $exe->errorInfo(), 'q' => $q, 'res' => $sqlR, 'count' => $sqlC));
            #-----------------------------------------------------------------------------------------------------------
            Logger::FixSQL($i);
            if (isset($i['err'][2]) && $i['err'][2]) {
                Logger::FixFE($app, __METHOD__, '{{ma_checker}}',
                    '{{ma_checker_db}}', '{{errDBSelectRow}}', '<u>{{dbErrorDesc}}</u>: ' . $i['err'][2] . ' :: ' . $i['err'][2]);
            }
        }
        #---------------------------------------------------------------------------------------------------------------
        return $sqlR;
    }
    #===================================================================================================================

    #===================================================================================================================
    /**
     * Select data as one row
     * @var $app App
     * @var $tbl_name string - table name
     * @var $filter array SELECT QUERY PARAMS
     * @return array
     */
    public static function sqlSelectOne(App &$app, $tbl_name, $filter = array())
    {
        $row = DB::sqlSelect($app, $tbl_name, $filter, array(), 1);
        if (count($row) > 0 && isset($row[0]) && $row[0]) {
            return $row[0];
        }
        return array();
    }
    #===================================================================================================================

    #===================================================================================================================
    /**
     * Insert data
     * @var $app App
     * @var $tbl_name string - table name
     * @var $d array Data to be insert
     * @var $return bool
     * @return int|mixed
     */
    public static function sqlInsert(App &$app, $tbl_name, $d = array(), $return = FALSE)
    {
        if ($app->chMigrate() == TRUE) {
            return;
        }
        /** @var $pdo PDO */
        DB::chDB($app);
        $lid = NULL;
        #---------------------------------------------------------------------------------------------------------------
        $sqlP = $sqlV = $sqlF = array();
        $x = $app->d['script']['php']['temp']['prefix']['sqlActions'];
        #---------------------------------------------------------------------------------------------------------------
        if (!$tbl_name || !isset($app->t[$tbl_name])) {
            Logger::FixFE($app, __METHOD__, '{{ma_checker}}',
                '{{ma_checker_db}}', '{{errDBTableNameUnknown}}', '<u>{{dbTableName}}</u>: ' . $tbl_name);
        }
        #---------------------------------------------------------------------------------------------------------------
        if (is_array($d) && $d) {
            $c = 0;
            foreach ($d as $k => $v) {
                $c++;
                $sqlV[] = ":" . $x . $c;
                $sqlP[$x . $c] = $v;
                $sqlF[] = "`" . trim($k) . "`";
            }
        } else {
            Logger::Fix($app, __METHOD__, '{{ma_checker}}', '{{ma_checker_db}}', '{{errDBDataNotArray}}');
            return;
        }
        #---------------------------------------------------------------------------------------------------------------
        $p = $app->dbProfileName;
        if (isset(DB::$PDO[$p]) && DB::$PDO[$p] instanceof PDO) {
            #-----------------------------------------------------------------------------------------------------------
            $sqlT = $app->t[$tbl_name];
            $sqlF = implode(', ', $sqlF);
            $q = 'insert into ' . $sqlT . ' (' . $sqlF . ') values(' . implode(', ', $sqlV) . ');';
            $pdo = DB::$PDO[$p];
            $exe = $pdo->prepare($q);
            $exe->execute($sqlP);
            $lid = $pdo->lastInsertId();
            $i = array_merge(DB::ERR, array('lid' => $lid, 'err' => $exe->errorInfo(), 'q' => $q));
            #-----------------------------------------------------------------------------------------------------------
            Logger::FixSQL($i);
            if (isset($i['err'][2]) && $i['err'][2]) {
                Logger::FixFE($app, __METHOD__, '{{ma_checker}}',
                    '{{ma_checker_db}}', '{{errDBInsertRow}}', '<u>{{dbErrorDesc}}</u>: ' . $i['err'][2] . ' :: ' . json_encode($d));
            }
            #-----------------------------------------------------------------------------------------------------------
        } else {
            Logger::FixFE($app, __METHOD__, '{{ma_checker}}', '{{ma_checker_db}}', '{{errDBConnProfileNameIsNotInList}}',
                '<u>{{dbProfileName}}</u>: ' . $p);
        }
        #---------------------------------------------------------------------------------------------------------------
        if ($return) {
            return $lid;
        }
        return NULL;
    }
    #===================================================================================================================

    #===================================================================================================================
    /** make DB Connection if possible @var $app App */
    public static function chDB(App &$app)
    {
        DB::chDBProfile($app);
        DB::connectPDO($app);
    }
    #===================================================================================================================

    #===================================================================================================================
    /** Check-out DB Connection Profile @var $app App */
    static function chDBProfile(App &$app)
    {
        $p = $app->dbProfileName;
        #---------------------------------------------------------------------------------------------------------------
        Fix::cm(__METHOD__, A::d($app, 'm')['cm_db_chDBProfileName'], $p);
        #---------------------------------------------------------------------------------------------------------------
        if (!$p) {
            Logger::FixFE($app, __METHOD__, '{{ma_checker}}', '{{ma_checker_db}}',
                '{{errDBProfileNameIsEmpty}}');
        } else {
            Logger::Fix($app, __METHOD__, '{{ma_checker}}', '{{ma_checker_db}}',
                '{{fixDBcheckerProfileName}}', '<u>{{dbProfileName}}</u>: ' . $p);
        }
        #---------------------------------------------------------------------------------------------------------------
    }
    #===================================================================================================================

    #===================================================================================================================
    /**
     * Make DB Connection
     * @var $app App
     */
    static function connectPDO(App &$app)
    {
        $p = $app->dbProfileName;
        #---------------------------------------------------------------------------------------------------------------
        if (!isset(DB::$PDO[$p]) || !DB::$PDO[$p] instanceof PDO) {
            $i = $app->dbConn[$p];
            try {
                DB::$PDO[$p] = new PDO("mysql:host=" . $i[0] . ";dbname=" . $i[4], $i[2], $i[3]);
            } catch (Exception $e) {
                Logger::FixFE($app, __METHOD__, '{{ma_checker}}', '{{ma_checker_db}}',
                    '{{errDBConnParamsAreWrong}}', '<u>{{dbProfileName}}</u>: ' . $p);
            }
        } elseif (isset(DB::$PDO[$p]) && !DB::$PDO[$p] instanceof PDO) {
            Logger::FixFE($app, __METHOD__, '{{ma_checker}}',
                '{{ma_checker_db}}', '{{errDBConnProfileNameIsNotInList}}', '<u>{{dbProfileName}}</u>: ' . $p);
        }
    }
    #===================================================================================================================

    #===================================================================================================================
    /**
     * Create new DB
     * @var $app App
     */
    public static function newDB(App &$app)
    {
        #---------------------------------------------------------------------------------------------------------------
        /** @var $pdo PDO */
        DB::chDBProfile($app);
        $p = $app->dbProfileName;
        $i = $app->dbConn[$p];
        #---------------------------------------------------------------------------------------------------------------
        $q = 'CREATE DATABASE IF NOT EXISTS `' . $app->dbConn[$p][4] . '` CHARACTER SET utf8 COLLATE utf8_general_ci;';
        try {
            $pdo = new PDO("mysql:host=" . $i[0], $i[2], $i[3]);
        } catch (Exception $e) {
            Logger::FixFE($app, __METHOD__, '{{ma_migrate}}', '{{ma_migrate_make}}', '{{errPDO}}');
        }
        #---------------------------------------------------------------------------------------------------------------
        $exe = $pdo->prepare($q);
        $exe->execute();
        #---------------------------------------------------------------------------------------------------------------
        $i = array_merge(DB::ERR, array('err' => $exe->errorInfo(), 'q' => $q));
        #---------------------------------------------------------------------------------------------------------------
        Logger::FixSQL($i);
        if (isset($i['err'][2]) && $i['err'][2]) {
            Logger::FixFE($app, __METHOD__, '{{ma_migrate}}',
                '{{ma_migrate_make}}', '{{errDBCreateDB}}', '<u>{{dbErrorDesc}}</u>: ' . $i['err'][2] . ' :: ' . $i['err'][2]);
        }
        #---------------------------------------------------------------------------------------------------------------
    }
    #===================================================================================================================
...................


}
